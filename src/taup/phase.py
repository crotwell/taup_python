
# autogenerated from picocli command line arguments in TauP
# For The TauP Toolkit, version: 3.1.0

class PhaseQuery:
  def __init__(self):
    self.toolname= "phase"

    self._model=None
    self._phase=[]
    self._receiverdepth=[]
    self._scatter=[]
    self._sourcedepth=[]

  def calcJson(self, taupServer):
    """
    Sends all params to the server, returns the result parsed from JSON.
    """
    params = self.create_params()
    return taupServer.queryJson(params, self.toolname)


  def calcHtml(self, taupServer):
    """
    Sends all params to the server, returns the result as a text version of html.
    """
    params = self.create_params()
    return taupServer.queryHtml(params, self.toolname)


  def calcText(self, taupServer):
    """
    Sends all params to the server, returns the result as a text version of text.
    """
    params = self.create_params()
    return taupServer.queryText(params, self.toolname)


  def get_mod(self):
    """
    returns current value of model as a String
    """
    return self._model

  def mod(self, val):
    """
    Sets the model parameter, of type String

    use velocity model "modelName" for calculations.
    Default is iasp91. Other builtin models include prem, ak135, ak135fcont, and ak135favg.

    Known as --mod in command line.
    Also known as --model in command line.

    :param val: value to set model to
    """
    self._model = val
    return self

  def get_model(self):
    """
    returns current value of model as a String
    """
    return self._model

  def model(self, val):
    """
    Sets the model parameter, of type String

    use velocity model "modelName" for calculations.
    Default is iasp91. Other builtin models include prem, ak135, ak135fcont, and ak135favg.

    Known as --model in command line.

    :param val: value to set model to
    """
    self._model = val
    return self

  def get_p(self):
    """
    returns current value of phase as a List
    """
    return self._phase

  def p(self, val):
    """
    Sets the phase parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.p( value )
    and
    params.p( [ value ] )
    are equivalent.

    seismic phase names

    Known as -p in command line.
    Also known as --phase in command line.

    :param val: value to set phase to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._phase = val
    return self


  def andP(self, val):
    """
    Sets the phase parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.p( value )
    and
    params.p( [ value ] )
    are equivalent.

    seismic phase names

    Known as -p in command line.
    Also known as --phase in command line.

    :param val: value to set phase to
    """
    self._phase.append(val)
    return self

  def get_phase(self):
    """
    returns current value of phase as a List
    """
    return self._phase

  def phase(self, val):
    """
    Sets the phase parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.phase( value )
    and
    params.phase( [ value ] )
    are equivalent.

    seismic phase names

    Known as --phase in command line.

    :param val: value to set phase to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._phase = val
    return self


  def andPhase(self, val):
    """
    Sets the phase parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.phase( value )
    and
    params.phase( [ value ] )
    are equivalent.

    seismic phase names

    Known as --phase in command line.

    :param val: value to set phase to
    """
    self._phase.append(val)
    return self

  def get_ph(self):
    """
    returns current value of phase as a List
    """
    return self._phase

  def ph(self, val):
    """
    Sets the phase parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.ph( value )
    and
    params.ph( [ value ] )
    are equivalent.

    seismic phase names

    Known as --ph in command line.
    Also known as --phase in command line.

    :param val: value to set phase to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._phase = val
    return self


  def andPh(self, val):
    """
    Sets the phase parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.ph( value )
    and
    params.ph( [ value ] )
    are equivalent.

    seismic phase names

    Known as --ph in command line.
    Also known as --phase in command line.

    :param val: value to set phase to
    """
    self._phase.append(val)
    return self

  def get_stadepth(self):
    """
    returns current value of receiverdepth as a List
    """
    return self._receiverdepth

  def stadepth(self, val):
    """
    Sets the receiverdepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.stadepth( value )
    and
    params.stadepth( [ value ] )
    are equivalent.

    the receiver depth in km for stations not at the surface

    Known as --stadepth in command line.
    Also known as --receiverdepth in command line.

    :param val: value to set receiverdepth to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._receiverdepth = val
    return self


  def andStadepth(self, val):
    """
    Sets the receiverdepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.stadepth( value )
    and
    params.stadepth( [ value ] )
    are equivalent.

    the receiver depth in km for stations not at the surface

    Known as --stadepth in command line.
    Also known as --receiverdepth in command line.

    :param val: value to set receiverdepth to
    """
    self._receiverdepth.append(val)
    return self

  def get_receiverdepth(self):
    """
    returns current value of receiverdepth as a List
    """
    return self._receiverdepth

  def receiverdepth(self, val):
    """
    Sets the receiverdepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.receiverdepth( value )
    and
    params.receiverdepth( [ value ] )
    are equivalent.

    the receiver depth in km for stations not at the surface

    Known as --receiverdepth in command line.

    :param val: value to set receiverdepth to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._receiverdepth = val
    return self


  def andReceiverdepth(self, val):
    """
    Sets the receiverdepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.receiverdepth( value )
    and
    params.receiverdepth( [ value ] )
    are equivalent.

    the receiver depth in km for stations not at the surface

    Known as --receiverdepth in command line.

    :param val: value to set receiverdepth to
    """
    self._receiverdepth.append(val)
    return self

  def get_scat(self):
    """
    returns current value of scatter as a List
    """
    return self._scatter

  def scat(self, depth, degree):
    """
    Sets the scatter parameter, of type List of Double

    scattering depth and distance in degrees, which may be negative. Only effects phases with 'o' or 'O' in the phase name.

    Known as --scat in command line.
    Also known as --scatter in command line.

    :param val: value to set scatter to
    """
    self._scatter = [depth, degree]
    return self

  def get_scatter(self):
    """
    returns current value of scatter as a List
    """
    return self._scatter

  def scatter(self, depth, degree):
    """
    Sets the scatter parameter, of type List of Double

    scattering depth and distance in degrees, which may be negative. Only effects phases with 'o' or 'O' in the phase name.

    Known as --scatter in command line.

    :param val: value to set scatter to
    """
    self._scatter = [depth, degree]
    return self

  def get_h(self):
    """
    returns current value of sourcedepth as a List
    """
    return self._sourcedepth

  def h(self, val):
    """
    Sets the sourcedepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.h( value )
    and
    params.h( [ value ] )
    are equivalent.

    source depth in km

    Known as -h in command line.
    Also known as --sourcedepth in command line.

    :param val: value to set sourcedepth to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._sourcedepth = val
    return self


  def andH(self, val):
    """
    Sets the sourcedepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.h( value )
    and
    params.h( [ value ] )
    are equivalent.

    source depth in km

    Known as -h in command line.
    Also known as --sourcedepth in command line.

    :param val: value to set sourcedepth to
    """
    self._sourcedepth.append(val)
    return self

  def get_sourcedepth(self):
    """
    returns current value of sourcedepth as a List
    """
    return self._sourcedepth

  def sourcedepth(self, val):
    """
    Sets the sourcedepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.sourcedepth( value )
    and
    params.sourcedepth( [ value ] )
    are equivalent.

    source depth in km

    Known as --sourcedepth in command line.

    :param val: value to set sourcedepth to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._sourcedepth = val
    return self


  def andSourcedepth(self, val):
    """
    Sets the sourcedepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.sourcedepth( value )
    and
    params.sourcedepth( [ value ] )
    are equivalent.

    source depth in km

    Known as --sourcedepth in command line.

    :param val: value to set sourcedepth to
    """
    self._sourcedepth.append(val)
    return self

  def get_evdepth(self):
    """
    returns current value of sourcedepth as a List
    """
    return self._sourcedepth

  def evdepth(self, val):
    """
    Sets the sourcedepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.evdepth( value )
    and
    params.evdepth( [ value ] )
    are equivalent.

    source depth in km

    Known as --evdepth in command line.
    Also known as --sourcedepth in command line.

    :param val: value to set sourcedepth to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._sourcedepth = val
    return self


  def andEvdepth(self, val):
    """
    Sets the sourcedepth parameter, of type List of Double
    If a single Double is passed in, it is automatically wrapped in a list. So
    params.evdepth( value )
    and
    params.evdepth( [ value ] )
    are equivalent.

    source depth in km

    Known as --evdepth in command line.
    Also known as --sourcedepth in command line.

    :param val: value to set sourcedepth to
    """
    self._sourcedepth.append(val)
    return self


  def create_params(self):
    """
    Create dict of params suitible for passing to requests query call.
    """
    params = {
      "format": "json",
    }
    if self._model is not None:
      params["model"] = self._model
    if len(self._phase) > 0:
      params["phase"] = self._phase
    if len(self._receiverdepth) > 0:
      params["receiverdepth"] = self._receiverdepth
    if len(self._scatter) > 0:
      params["scatter"] = self._scatter
    if len(self._sourcedepth) > 0:
      params["sourcedepth"] = self._sourcedepth
    return params

