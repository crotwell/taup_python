
# autogenerated from picocli command line arguments in TauP
# For The TauP Toolkit, version: 3.0.2-SNAPSHOT_2025-07-14T122228

class DisconQuery:
  def __init__(self):
    self.toolname= "discon"

    self._model=[]

  def calcJson(self, taupServer):
    """
    Sends all params to the server, returns the result parsed from JSON.
    """
    params = self.create_params()
    return taupServer.queryJson(params, self.toolname)


  def calcHtml(self, taupServer):
    """
    Sends all params to the server, returns the result as a text version of html.
    """
    params = self.create_params()
    return taupServer.queryHtml(params, self.toolname)


  def calcText(self, taupServer):
    """
    Sends all params to the server, returns the result as a text version of text.
    """
    params = self.create_params()
    return taupServer.queryText(params, self.toolname)


  def get_mod(self):
    """
    returns current value of model as a List
    """
    return self._model

  def mod(self, val):
    """
    Sets the model parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.mod( value )
    and
    params.mod( [ value ] )
    are equivalent.

    use velocity model "modelname" for calculations, format is guessed.

    Known as --mod in command line.
    Also known as --model in command line.

    :param val: value to set model to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._model = val
    return self


  def andMod(self, val):
    """
    Sets the model parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.mod( value )
    and
    params.mod( [ value ] )
    are equivalent.

    use velocity model "modelname" for calculations, format is guessed.

    Known as --mod in command line.
    Also known as --model in command line.

    :param val: value to set model to
    """
    self._model.append(val)
    return self

  def get_model(self):
    """
    returns current value of model as a List
    """
    return self._model

  def model(self, val):
    """
    Sets the model parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.model( value )
    and
    params.model( [ value ] )
    are equivalent.

    use velocity model "modelname" for calculations, format is guessed.

    Known as --model in command line.

    :param val: value to set model to
    """
    if not hasattr(val, "__getitem__"):
      val = [ val ]
    self._model = val
    return self


  def andModel(self, val):
    """
    Sets the model parameter, of type List of String
    If a single String is passed in, it is automatically wrapped in a list. So
    params.model( value )
    and
    params.model( [ value ] )
    are equivalent.

    use velocity model "modelname" for calculations, format is guessed.

    Known as --model in command line.

    :param val: value to set model to
    """
    self._model.append(val)
    return self


  def create_params(self):
    """
    Create dict of params suitible for passing to requests query call.
    """
    params = {
      "format": "json",
    }
    if len(self._model) > 0:
      params["model"] = self._model
    return params

